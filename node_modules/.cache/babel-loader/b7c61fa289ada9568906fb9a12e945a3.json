{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eugene\\\\source\\\\repos\\\\CaseApp\\\\CaseApp\\\\client\\\\src\\\\components\\\\MainComponent.js\";\nimport React, { Component } from 'react';\nimport Main from './Main';\n\nclass MainComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonStyle: \"\",\n      filters: [],\n      selectedFilter: \"\",\n      input: \"\",\n      response: \"\"\n    };\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.updateInputValue = this.updateInputValue.bind(this);\n    this.handleSubmitAction = this.handleSubmitAction.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://localhost:44363/api/metrics').then(res => res.json()).then(state => {\n      this.setState({\n        filters: state\n      });\n      this.setState({\n        selectedFilter: this.state.filters[0].id\n      });\n    });\n  }\n\n  handleFilterChange(filter) {\n    this.setState({\n      selectedFilter: filter\n    });\n  }\n\n  handleSubmitAction() {\n    if (this.state.input === \"\") {\n      alert(\"Text field can't be empty!\");\n    } else {\n      fetch('https://localhost:44363/api/metrics?id=' + this.state.selectedFilter, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state.input)\n      }).then(res => res.text()).then(data => this.setState({\n        response: data\n      }));\n    }\n  }\n\n  updateInputValue(text) {\n    this.setState({\n      input: text\n    });\n    const buttonStyle = text == \"\" ? \"disabled\" : \"\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Main, {\n      filters: this.state.filters,\n      onFilterChange: this.handleFilterChange,\n      onInputUpdate: this.updateInputValue,\n      onSubmit: this.handleSubmitAction,\n      response: this.state.response,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default MainComponent;","map":{"version":3,"sources":["C:/Users/Eugene/source/repos/CaseApp/CaseApp/client/src/components/MainComponent.js"],"names":["React","Component","Main","MainComponent","constructor","props","state","buttonStyle","filters","selectedFilter","input","response","handleFilterChange","bind","updateInputValue","handleSubmitAction","componentDidMount","fetch","then","res","json","setState","id","filter","alert","method","headers","body","JSON","stringify","text","data","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAqC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAG,EADL;AAETC,MAAAA,OAAO,EAAG,EAFD;AAGTC,MAAAA,cAAc,EAAE,EAHP;AAITC,MAAAA,KAAK,EAAE,EAJE;AAKTC,MAAAA,QAAQ,EAAG;AALF,KAAb;AAOA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACH;;AACDG,EAAAA,iBAAiB,GACjB;AACIC,IAAAA,KAAK,CAAC,qCAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMZ,KAAK,IAAG;AACV,WAAKe,QAAL,CAAc;AAACb,QAAAA,OAAO,EAAEF;AAAV,OAAd;AACA,WAAKe,QAAL,CAAc;AAACZ,QAAAA,cAAc,EAAG,KAAKH,KAAL,CAAWE,OAAX,CAAmB,CAAnB,EAAsBc;AAAxC,OAAd;AACH,KALD;AAMH;;AAEDV,EAAAA,kBAAkB,CAACW,MAAD,EAClB;AACI,SAAKF,QAAL,CAAc;AAACZ,MAAAA,cAAc,EAAGc;AAAlB,KAAd;AACH;;AAEDR,EAAAA,kBAAkB,GAClB;AACI,QAAG,KAAKT,KAAL,CAAWI,KAAX,KAAqB,EAAxB,EACA;AACIc,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACH,KAHD,MAII;AACJP,MAAAA,KAAK,CAAC,4CAA0C,KAAKX,KAAL,CAAWG,cAAtD,EACL;AACIgB,QAAAA,MAAM,EAAC,MADX;AAEIC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFb;AAKIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAKvB,KAAL,CAAWI,KAA1B;AALV,OADK,CAAL,CAQCQ,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACW,IAAJ,EARb,EASCZ,IATD,CASMa,IAAI,IAAI,KAAKV,QAAL,CAAc;AAACV,QAAAA,QAAQ,EAAEoB;AAAX,OAAd,CATd;AAUC;AACJ;;AAGDjB,EAAAA,gBAAgB,CAACgB,IAAD,EAChB;AACI,SAAKT,QAAL,CAAc;AAACX,MAAAA,KAAK,EAAEoB;AAAR,KAAd;AACA,UAAMvB,WAAW,GAAGuB,IAAI,IAAI,EAAR,GAAc,UAAd,GAA2B,EAA/C;AACH;;AAEDE,EAAAA,MAAM,GAAE;AACJ,wBAAO,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWE,OAA1B;AAAmC,MAAA,cAAc,EAAE,KAAKI,kBAAxD;AAA4E,MAAA,aAAa,EAAE,KAAKE,gBAAhG;AAAkH,MAAA,QAAQ,EAAE,KAAKC,kBAAjI;AAAqJ,MAAA,QAAQ,EAAI,KAAKT,KAAL,CAAWK,QAA5K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AA3DgC;;AA8DrC,eAAeR,aAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Main from './Main'\r\n\r\nclass MainComponent extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            buttonStyle : \"\",\r\n            filters : [],\r\n            selectedFilter: \"\",\r\n            input: \"\",\r\n            response : \"\"\r\n        }\r\n        this.handleFilterChange = this.handleFilterChange.bind(this);\r\n        this.updateInputValue = this.updateInputValue.bind(this);\r\n        this.handleSubmitAction = this.handleSubmitAction.bind(this);\r\n    }\r\n    componentDidMount()\r\n    {\r\n        fetch('https://localhost:44363/api/metrics')\r\n        .then(res => res.json())\r\n        .then(state =>{\r\n            this.setState({filters: state});\r\n            this.setState({selectedFilter : this.state.filters[0].id})\r\n        } )\r\n    }\r\n\r\n    handleFilterChange(filter)\r\n    {\r\n        this.setState({selectedFilter : filter});\r\n    }\r\n\r\n    handleSubmitAction()\r\n    {\r\n        if(this.state.input === \"\")\r\n        {\r\n            alert(\"Text field can't be empty!\");\r\n        }\r\n        else{\r\n        fetch('https://localhost:44363/api/metrics?id='+this.state.selectedFilter,\r\n        {   \r\n            method:'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n            body: JSON.stringify(this.state.input)\r\n        }) \r\n        .then(res => res.text())\r\n        .then(data => this.setState({response: data}));\r\n        }\r\n    }\r\n    \r\n\r\n    updateInputValue(text)\r\n    {\r\n        this.setState({input: text});\r\n        const buttonStyle = text == \"\" ?  \"disabled\" : \"\";\r\n    }\r\n\r\n    render(){\r\n        return(<Main filters={this.state.filters} onFilterChange={this.handleFilterChange} onInputUpdate={this.updateInputValue} onSubmit={this.handleSubmitAction} response = {this.state.response}/>);\r\n    }\r\n}\r\n\r\nexport default MainComponent;"]},"metadata":{},"sourceType":"module"}